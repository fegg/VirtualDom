webpackJsonp([0,1],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var Element = __webpack_require__(1);
	var Diff = __webpack_require__(3);


	var el = Element.create;

	var ul = el('ul', {id: 'list'}, [
	    el('li', {class: 'item'}, ['item1']),
	    el('li', {class: 'item'}, ['item2']),
	    el('li', {class: 'item'}, ['item3']),
	    el('li', {class: 'item'}, ['item4']),
	])



	var newUl = el('ul', {id: 'list'}, [
	    el('li', {class: 'item',style:'color:red;font-size:18px;'}, ['item1']),
	    el('li', {class: 'item'}, ['item2']),
	    el('li', {class: 'item'}, ['item3']),
	    el('li', {class: 'item'}, ['item4']),
	])




	// var pathes = Diff(ul,newUl);

	console.log(ul,newUl);


	// console.log(pathes);

	var ul1 = Element.render(ul);
	var ul2 = Element.render(newUl);




	document.getElementById('pre1').innerHTML = JSON.stringify(ul);
	document.getElementById('pre2').innerHTML = JSON.stringify(newUl);


	document.body.appendChild(ul1);
	document.body.appendChild(ul2);




/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var utils = __webpack_require__(2);

	var Element = {
	    index: 0,
	    create: function(tagName, props, children) {
	        var _current = {};
	        _current.tagName = tagName;
	        _current.props = props;
	        _current.children = children;
	        _current.key = props.key ? props.key : Element.index;
	        Element.index++;
	        return _current; // dom obj
	    },
	    render: function(domObj) {
	        var el = document.createElement(domObj.tagName);
	        var props = domObj.props;
	        for (var item in props) {
	            var val = props[item];
	            el.setAttribute(item, val);
	        }
	        // key for diff
	        el.setAttribute('key', domObj.key);
	        var children = domObj.children;
	        children.forEach(function(child) {
	            var childEl = child.tagName !== undefined ? Element.render(child) : document.createTextNode(child);
	            el.appendChild(childEl);
	        })
	        return el; // dom tree
	    }
	}



	module.exports = Element;


/***/ },
/* 2 */
/***/ function(module, exports) {

	var utils = {};

	utils.isString = function(some) {
		return Object.prototype.toString.call(some) === '[object String]';
	}

	utils.isArry = function(some){
		return Object.prototype.toString.call(some) === '[object Array]';
	}



	module.exports = utils;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	
	var utils = __webpack_require__(2);

	module.exports = DIFF_TYPE = {
	    MOVE: 1,
	    REPLACE: 2,
	    PROPS: 3,
	    TEXT: 4
	}




	var diff = function(oldTree, newTree) {
	    var index = 0;
	    var patches = {};
	    runDiff(oldTree, newTree, index, patches);
	    return patches;
	}


	var runDiff = function(oldDom, newDom, index, patches) {
	    // 本次 diff 的差异纪录
	    var _current = [];

	    if (newDom === null) { // 新节点不存在，全部替换

	    } else if (utils.isString(oldDom) && utils.isString(newDom)) { // 如果只是普通的文本
	        if (oldDom !== newDom) {
	            _current.push({
	                type: DIFF_TYPE.TEXT,
	                content: newDom
	            })
	        }
	    } else if ((oldDom.tagName === newDom.tagName) && (oldDom.key === newDom.key)) { // 如果节点一致，对比 props
	        var propsPatches = diffProps(oldDom, newDom);
	        _current.push({
	            type: DIFF_TYPE.PROPS,
	            props: propsPatches
	        })

	    } else { // 节点不一致，
	        _current.push({
	            type: DIFF_TYPE.REPLACE,
	            node: newDom
	        })
	    }

	    index++;

	    patches[index] = _current;

	}


	var diffProps = function(oldDom, newDom) {
	    var oldProps = oldDom.props;
	    var newProps = newDom.props;

	    var patches = {};

	    // 对比不同的props
	    for(key in oldProps){
	    	var value = oldProps[key];
	    	if(newProps[key] !== value){
	    		patches[key] = value;
	    	}
	    }

	    // newDom 的其他 props
	    for(key in newProps){
	    	var value = newProps[key];
	    	if(patches[key] !== value){
		    	patches[key] = value;
	    	}
	    }

	    return patches;
	}


	module.exports = diff;


/***/ }
]);